import control as ctrl
import numpy as np.
from deap import base, creator, tools, algorithms
import random
import matplotlib.pyplot as plt

# Definiowanie funkcji transferowej G(s)
num = [1]  # Licznik
den = [1, 2, 1]  # Mianownik
system = ctrl.TransferFunction(num, den)


def pid_controller(Kp, Ki, Kd):
    # Regulator PID w domenie Laplace'a
    pid = ctrl.TransferFunction([Kd, Kp, Ki], [1, 0])
    return pid

def closed_loop_response(system, pid):
    closed_loop = ctrl.feedback(pid * system, 1)  # Połączenie sprzężenia zwrotnego
    t, y = ctrl.step_response(closed_loop)  # Odpowiedź skokowa
    return t, y


def fitness(Kp, Ki, Kd, system):
    pid = pid_controller(Kp, Ki, Kd)
    t, y = closed_loop_response(system, pid)
    e = 1 - y  # Uchyb (zakładamy, że sygnał referencyjny to 1)
    ise = np.sum(e**2) * (t[1] - t[0])  # Aproksymacja całki
    return ise
# Tworzenie funkcji celu (minimalizacja ISE)
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()
toolbox.register("attr_float", random.uniform, 0.01, 10)  # Zakres dla Kp, Ki, Kd
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=3)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Rejestracja operatorów genetycznych
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)

# Funkcja oceny (fitness)
def evaluate(individual):
    Kp, Ki, Kd = individual
    return fitness(Kp, Ki, Kd, system),

toolbox.register("evaluate", evaluate)

# Parametry algorytmu genetycznego
population = toolbox.population(n=50)
generations = 20

# Algorytm genetyczny
result = algorithms.eaSimple(population, toolbox, cxpb=0.7, mutpb=0.2, ngen=generations, 
                              stats=None, verbose=True)

# Najlepsze rozwiązanie
best_individual = tools.selBest(population, k=1)[0]
print(f"Najlepsze parametry PID: Kp={best_individual[0]}, Ki={best_individual[1]}, Kd={best_individual[2]}")


# Symulacja dla najlepszych parametrów
Kp, Ki, Kd = best_individual
pid = pid_controller(Kp, Ki, Kd)
t, y = closed_loop_response(system, pid)

# Rysowanie wykresu
plt.plot(t, y, label="Odpowiedź układu")
plt.axhline(1, color="r", linestyle="--", label="Wartość zadana")
plt.xlabel("Czas [s]")
plt.ylabel("Wyjście")
plt.title("Odpowiedź skokowa układu z optymalnym PID")
plt.legend()
plt.grid()
plt.show()
